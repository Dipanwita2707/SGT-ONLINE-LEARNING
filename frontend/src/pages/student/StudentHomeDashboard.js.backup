import React, { useState, useEffect } from 'react';
import { 
  Typography, 
  Container, 
  Grid, 
  Paper, 
  Box, 
  Button, 
  Card, 
  CardContent, 
  CardActions, 
  CircularProgress, 
  Divider, 
  List, 
  ListItem, 
  ListItemText, 
  ListItemAvatar, 
  Avatar, 
  LinearProgress,
  Alert,
  Chip,
  Fade,
  Slide,
  Zoom,
  keyframes,
  useTheme,
  IconButton,
  Stack
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { getCurrentUser } from '../../utils/authService';
import LoadingScreen from '../../components/common/LoadingScreen';
import SGTLogo from '../../components/common/SGTLogo';
// import { getAllDeadlineWarnings } from '../../api/studentVideoApi';

// Icons
import VideoLibraryIcon from '@mui/icons-material/VideoLibrary';
import OndemandVideoIcon from '@mui/icons-material/OndemandVideo';
import BarChartIcon from '@mui/icons-material/BarChart';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import WarningIcon from '@mui/icons-material/Warning';
import SchoolIcon from '@mui/icons-material/School';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';
import StarIcon from '@mui/icons-material/Star';
import MenuBookIcon from '@mui/icons-material/MenuBook';
import AssignmentIcon from '@mui/icons-material/Assignment';
import NotificationsIcon from '@mui/icons-material/Notifications';
import SettingsIcon from '@mui/icons-material/Settings';
import DashboardIcon from '@mui/icons-material/Dashboard';
import PeopleIcon from '@mui/icons-material/People';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';

// Animation keyframes
const fadeInUp = keyframes`
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`;

const bounce = keyframes`
  0%, 20%, 53%, 80%, 100% {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -8px, 0) scaleY(1.1);
  }
  70% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -4px, 0) scaleY(1.05);
  }
  90% {
    transform: translate3d(0, -1px, 0);
  }
`;

const shimmer = keyframes`
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
`;

const pulse = keyframes`
  0% {
    box-shadow: 0 0 0 0 rgba(21, 101, 192, 0.4);
  }
  70% {
    box-shadow: 0 0 0 20px rgba(21, 101, 192, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(21, 101, 192, 0);
  }
`;

const StudentHomeDashboard = () => {
  const navigate = useNavigate();
  const theme = useTheme();
  const token = localStorage.getItem('token');
  const currentUser = getCurrentUser(); // Use getCurrentUser instead of parseJwt
  
  const [courses, setCourses] = useState([]);
  const [recentActivity, setRecentActivity] = useState([]);
  const [deadlineWarnings, setDeadlineWarnings] = useState(null);
  const [deadlineLoading, setDeadlineLoading] = useState(true);
  const [statistics, setStatistics] = useState({
    totalCourses: 0,
    totalVideos: 0,
    videosWatched: 0,
    totalWatchTime: 0,
    completedQuizzes: 0,
    averageScore: 0
  });
  const [loading, setLoading] = useState(true);
  const [showLoading, setShowLoading] = useState(true);
  const [error, setError] = useState('');
  
  // Animation states
  const [cardsLoaded, setCardsLoaded] = useState(false);
  
  useEffect(() => {
    // Show loading screen for at least 2 seconds for better UX
    const loadingTimer = setTimeout(() => {
      setShowLoading(false);
      setCardsLoaded(true);
    }, 2000);

    return () => clearTimeout(loadingTimer);
  }, []);
  
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Get student courses with progress info
        const coursesResponse = await axios.get('/api/student/courses', {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        setCourses(coursesResponse.data);
        
        // Calculate initial statistics from courses
        const stats = {
          totalCourses: coursesResponse.data.length,
          totalVideos: coursesResponse.data.reduce((sum, course) => sum + (course.totalVideos || course.videoCount || 0), 0),
          videosWatched: 0, // Will be calculated from watch history
          totalWatchTime: 0, // Will be calculated from watch history
          completedQuizzes: 0, // Will be calculated from quiz data
          averageScore: 0
        };
        
        setStatistics(stats);
        
        // Get recent activity (watch history) and calculate accurate statistics
        try {
          const activityResponse = await axios.get('/api/student/watch-history', {
            headers: { Authorization: `Bearer ${token}` }
          });
          
          const watchHistoryData = activityResponse.data || [];
          setRecentActivity(watchHistoryData);
          
          // Calculate accurate statistics from watch history
          let totalVideosWatched = 0;
          let totalWatchTimeAccumulated = 0;
          
          // Create a map of course watch data for easy lookup
          const courseWatchMap = {};
          
          watchHistoryData.forEach(courseHistory => {
            if (courseHistory.videos && Array.isArray(courseHistory.videos)) {
              const courseId = courseHistory.courseId;
              const watchedVideosInCourse = courseHistory.videos.filter(video => video.timeSpent > 0).length;
              const courseWatchTime = courseHistory.totalTimeSpent || 0;
              
              courseWatchMap[courseId] = {
                videosWatched: watchedVideosInCourse,
                totalWatchTime: courseWatchTime,
                videos: courseHistory.videos
              };
              
              totalVideosWatched += watchedVideosInCourse;
              totalWatchTimeAccumulated += courseWatchTime;
            }
          });
          
          // Enhance course data with watch information
          const enhancedCourses = coursesResponse.data.map(course => {
            const watchData = courseWatchMap[course._id];
            if (watchData) {
              // Calculate enhanced progress based on videos watched
              const videoProgress = course.totalVideos > 0 ? 
                Math.round((watchData.videosWatched / course.totalVideos) * 100) : 0;
              
              return {
                ...course,
                enhancedProgress: Math.max(course.progress || 0, videoProgress),
                actualVideosWatched: watchData.videosWatched,
                actualWatchTime: watchData.totalWatchTime,
                watchedVideos: watchData.videos
              };
            }
            return course;
          });
          
          setCourses(enhancedCourses);
          
          console.log('🔍 Debug - Enhanced Courses:', enhancedCourses);
          
          // Update statistics with accurate data
          console.log('🔍 Debug - Watch Statistics:', {
            totalVideosWatched,
            totalWatchTimeAccumulated,
            courseWatchMap
          });
          
          setStatistics(prev => ({
            ...prev,
            videosWatched: totalVideosWatched,
            totalWatchTime: totalWatchTimeAccumulated
          }));
          
        } catch (activityErr) {
          console.error('Error fetching watch history:', activityErr);
          setRecentActivity([]);
        }
        
        // Get quiz results for completed quizzes count
        try {
          const quizResponse = await axios.get('/api/student/quiz-results', {
            headers: { Authorization: `Bearer ${token}` }
          });
          
          if (quizResponse.data && quizResponse.data.attempts) {
            const quizAttempts = quizResponse.data.attempts;
            const completedQuizzes = quizAttempts.length;
            const averageScore = quizResponse.data.summary?.averageScore || 0;
            
            setStatistics(prev => ({
              ...prev,
              completedQuizzes,
              averageScore: Math.round(averageScore)
            }));
          } else if (quizResponse.data && Array.isArray(quizResponse.data)) {
            // Fallback for old format
            const quizResults = quizResponse.data;
            const completedQuizzes = quizResults.length;
            const averageScore = quizResults.reduce((sum, quiz) => sum + (quiz.score || 0), 0) / completedQuizzes;
            
            setStatistics(prev => ({
              ...prev,
              completedQuizzes,
              averageScore: Math.round(averageScore)
            }));
          }
        } catch (quizErr) {
          console.error('Error fetching quiz results:', quizErr);
        }
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching student data:', err);
        setError('Failed to load your dashboard data');
        setLoading(false);
      }
    };
    
    if (token) {
      fetchData();
    }
  }, [token]);

  // Fetch deadline warnings separately
  useEffect(() => {
    const fetchDeadlineWarnings = async () => {
      try {
        console.log('🔍 StudentHomeDashboard: Fetching deadline warnings...');
        if (token) {
          console.log('📞 Making API call to getAllDeadlineWarnings...');
          // const warnings = await getAllDeadlineWarnings(token);
          // console.log('📋 Received deadline warnings:', warnings);
          // setDeadlineWarnings(warnings);
          setDeadlineWarnings({ deadlineWarnings: [], summary: { total: 0, expired: 0, upcoming: 0 } });
        }
      } catch (error) {
        console.error('❌ Error fetching deadline warnings:', error);
        setDeadlineWarnings({ deadlineWarnings: [], summary: { total: 0, expired: 0, upcoming: 0 } });
      } finally {
        console.log('✅ Setting deadlineLoading to false');
        setDeadlineLoading(false);
      }
    };

    if (token) {
      fetchDeadlineWarnings();
    }
  }, [token]);
  
  const calculateOverallProgress = () => {
    if (courses.length === 0) return 0;
    
    // Use enhanced progress if available, otherwise fall back to course progress
    const totalProgress = courses.reduce((sum, course) => {
      const progressValue = course.enhancedProgress !== undefined ? 
        course.enhancedProgress : (course.progress || 0);
      return sum + progressValue;
    }, 0);
    
    const averageProgress = totalProgress / courses.length;
    return Math.round(Math.min(averageProgress, 100));
  };
  
  const formatDuration = (seconds) => {
    if (!seconds || seconds === 0) return '0m';
    const totalSeconds = Math.floor(seconds);
    const minutes = Math.floor(totalSeconds / 60);
    const remainingSeconds = totalSeconds % 60;
    
    if (minutes === 0) {
      return `${remainingSeconds}s`;
    } else if (minutes < 60) {
      return remainingSeconds > 0 ? `${minutes}m ${remainingSeconds}s` : `${minutes}m`;
    } else {
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      return `${hours}h ${remainingMinutes}m`;
    }
  };
  
  const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric'
    });
  };

  // Circular progress component
  const CircularProgressWithLabel = ({ value, size = 120, thickness = 8, color = "#4F46E5" }) => (
    <Box sx={{ position: 'relative', display: 'inline-flex' }}>
      <CircularProgress
        variant="determinate"
        value={value}
        size={size}
        thickness={thickness}
        sx={{
          color: color,
          '& .MuiCircularProgress-circle': {
            strokeLinecap: 'round',
          },
        }}
      />
      <Box
        sx={{
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          position: 'absolute',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <Typography variant="h4" component="div" sx={{ fontWeight: 'bold', color: color }}>
          {Math.round(value)}
        </Typography>
      </Box>
    </Box>
  );
  
  return (
    <>
      {showLoading && (
        <LoadingScreen 
          onComplete={() => setShowLoading(false)}
          message="Loading your academic dashboard..."
        />
      )}
      {!showLoading && (
        <Box
          sx={{
            minHeight: '100vh',
            background: 'linear-gradient(120deg, #f6f7fb 0%, #e3e9f7 50%, #f9fafc 100%)',
            backgroundAttachment: 'fixed',
            backgroundSize: 'cover',
            position: 'relative',
            overflow: 'hidden',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: '420px',
              background: 'linear-gradient(135deg, rgba(52, 152, 219, 0.13) 0%, rgba(116, 185, 255, 0.09) 100%)',
              clipPath: 'polygon(0 0, 100% 0, 100% 60%, 0 80%)',
              zIndex: 0,
            },
            '&::after': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: 'radial-gradient(circle at 20% 80%, rgba(52, 152, 219, 0.04) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(241, 196, 15, 0.04) 0%, transparent 50%)',
              zIndex: 0,
            },
            fontFamily: 'Inter, Segoe UI, Arial, sans-serif',
          }}
        >
          <Container maxWidth="lg" sx={{ position: 'relative', zIndex: 1, pt: 4, pb: 4 }}>
            {/* Header Section with University Branding */}
            <Fade in={cardsLoaded} timeout={800}>
              <Box sx={{ 
                textAlign: 'center', 
                mb: 6,
                position: 'relative',
                zIndex: 2,
                animation: `${fadeInUp} 0.8s ease-out`
              }}>
                {/* Glassmorphism container for logo */}
                <Box 
                  sx={{ 
                    display: 'inline-block',
                    background: 'rgba(255, 255, 255, 0.25)',
                    backdropFilter: 'blur(20px)',
                    borderRadius: '30px',
                    padding: '20px',
                    border: '1px solid rgba(255, 255, 255, 0.3)',
                    boxShadow: '0 25px 45px rgba(0, 0, 0, 0.1)',
                    mb: 3,
                  }}
                >
                  <SGTLogo size={100} animate={false} showText={false} variant="minimal" />
                </Box>
                
                <Typography 
                  variant="h2" 
                  sx={{ 
                    fontWeight: 'bold',
                    mb: 1,
                    background: 'linear-gradient(45deg, #3498db, #f1c40f, #3498db)',
                    backgroundSize: '200% 100%',
                    backgroundClip: 'text',
                    WebkitBackgroundClip: 'text',
                    color: 'transparent',
                    animation: `${shimmer} 3s ease-in-out infinite`,
                    letterSpacing: '2px',
                    fontFamily: '"Segoe UI", "Arial", sans-serif',
                  }}
                >
                  Welcome back, {currentUser?.name || 'Student'}!
                </Typography>
                
                <Typography 
                  variant="h5" 
                  sx={{ 
                    color: '#34495e',
                    fontWeight: 300,
                    letterSpacing: '1px',
                    mb: 3,
                    opacity: 0.8,
                  }}
                >
                  Continue your learning journey at SGT University
                </Typography>
                
                <Box sx={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  alignItems: 'center', 
                  gap: 3, 
                  flexWrap: 'wrap',
                }}>
                  <Box
                    sx={{
                      background: 'linear-gradient(45deg, #f1c40f, #f39c12)',
                      color: 'white',
                      padding: '12px 24px',
                      borderRadius: '30px',
                      fontWeight: 'bold',
                      boxShadow: '0 8px 32px rgba(241, 196, 15, 0.3)',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      backdropFilter: 'blur(10px)',
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1,
                    }}
                  >
                    <EmojiEventsIcon />
                    NAAC A+ Accredited
                  </Box>
                  <Box
                    sx={{
                      background: 'rgba(52, 152, 219, 0.1)',
                      color: '#2980b9',
                      padding: '12px 24px',
                      borderRadius: '30px',
                      fontWeight: 'bold',
                      border: '2px solid rgba(52, 152, 219, 0.3)',
                      backdropFilter: 'blur(10px)',
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1,
                    }}
                  >
                    <SchoolIcon />
                    Excellence in Education
                  </Box>
                </Box>
              </Box>
            </Fade>

            {/* Deadline Warnings Section */}
            {console.log('🎨 Rendering deadline section. deadlineLoading:', deadlineLoading, 'deadlineWarnings:', deadlineWarnings)}
            {deadlineLoading ? (
              <Slide direction="down" in={cardsLoaded} timeout={600}>
                <Alert severity="info" sx={{ mb: 3, borderRadius: 3, boxShadow: 3 }}>
                  Loading deadline information...
                </Alert>
              </Slide>
            ) : deadlineWarnings && deadlineWarnings.summary.total > 0 && (
              <Slide direction="down" in={cardsLoaded} timeout={600}>
                <Alert 
                  severity={deadlineWarnings.summary.expired > 0 ? "error" : "warning"} 
                  sx={{ 
                    mb: 4,
                    borderRadius: 3,
                    boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
                    border: '1px solid rgba(255,255,255,0.2)',
                    background: deadlineWarnings.summary.expired > 0 
                      ? 'linear-gradient(135deg, #ffebee, #ffcdd2)'
                      : 'linear-gradient(135deg, #fff3e0, #ffe0b2)',
                    animation: `${pulse} 2s infinite`,
                  }}
                  icon={<WarningIcon />}
                >
                  <Typography variant="h6" gutterBottom>
                    {deadlineWarnings.summary.expired > 0 ? "⚠️ Urgent Deadline Alerts!" : "📅 Upcoming Deadlines"}
                  </Typography>
                  <Typography variant="body2" paragraph>
                    You have {deadlineWarnings.summary.total} deadline{deadlineWarnings.summary.total !== 1 ? 's' : ''} requiring attention
                    {deadlineWarnings.summary.expired > 0 && (
                      <span style={{ fontWeight: 'bold', color: '#d32f2f' }}>
                        {' '}({deadlineWarnings.summary.expired} expired!)
                      </span>
                    )}
                  </Typography>
                  <List dense>
                    {deadlineWarnings.deadlineWarnings.slice(0, 3).map((warning) => (
                      <ListItem key={`${warning.course._id}-${warning.unit._id}`}>
                        <ListItemText
                          primary={
                            <Box display="flex" alignItems="center" gap={1}>
                              <Typography variant="subtitle2">
                                {warning.course.title} - {warning.unit.title}
                              </Typography>
                              <Chip
                                size="small"
                                label={warning.warning.isExpired ? 'EXPIRED' : `${warning.warning.daysRemaining} days left`}
                                color={warning.warning.isExpired ? 'error' : warning.warning.daysRemaining <= 1 ? 'warning' : 'info'}
                              />
                            </Box>
                          }
                          secondary={
                            <Typography variant="body2" color="text.secondary">
                              Deadline: {new Date(warning.unit.deadline).toLocaleDateString()} at{' '}
                              {new Date(warning.unit.deadline).toLocaleTimeString()}
                              {warning.unit.deadlineDescription && ` - ${warning.unit.deadlineDescription}`}
                            </Typography>
                          }
                        />
                      </ListItem>
                    ))}
                  </List>
                  {deadlineWarnings.deadlineWarnings.length > 3 && (
                    <Typography variant="body2" sx={{ mt: 1, fontStyle: 'italic' }}>
                      ...and {deadlineWarnings.deadlineWarnings.length - 3} more deadline{deadlineWarnings.deadlineWarnings.length - 3 !== 1 ? 's' : ''}
                    </Typography>
                  )}
                </Alert>
              </Slide>
            )}
            
            {loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 8 }}>
                <CircularProgress 
                  size={80} 
                  thickness={4}
                  sx={{
                    color: '#1565C0',
                    '& .MuiCircularProgress-circle': {
                      strokeLinecap: 'round',
                    },
                  }}
                />
              </Box>
            ) : error ? (
              <Fade in={cardsLoaded} timeout={800}>
                <Alert severity="error" sx={{ 
                  textAlign: 'center', 
                  mt: 4, 
                  borderRadius: 3,
                  boxShadow: 3 
                }}>
                  {error}
                </Alert>
              </Fade>
            ) : (
              <>
                {/* Statistics Cards */}
                <Grid container spacing={3} sx={{ mb: 6 }}>
                  {[
                    {
                      title: 'Total Courses',
                      value: statistics.totalCourses,
                      icon: <VideoLibraryIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(52, 152, 219, 0.15) 0%, rgba(116, 185, 255, 0.15) 100%)',
                      iconColor: '#3498db',
                      textColor: '#2980b9',
                      delay: 200
                    },
                    {
                      title: 'Videos Watched',
                      value: statistics.videosWatched,
                      subtitle: `out of ${statistics.totalVideos}`,
                      icon: <OndemandVideoIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(231, 76, 60, 0.15) 0%, rgba(255, 118, 117, 0.15) 100%)',
                      iconColor: '#e74c3c',
                      textColor: '#c0392b',
                      delay: 400
                    },
                    {
                      title: 'Watch Time',
                      value: formatDuration(statistics.totalWatchTime),
                      icon: <AccessTimeIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(46, 204, 113, 0.15) 0%, rgba(125, 206, 160, 0.15) 100%)',
                      iconColor: '#2ecc71',
                      textColor: '#27ae60',
                      delay: 600
                    },
                    {
                      title: 'Quizzes Completed',
                      value: statistics.completedQuizzes,
                      subtitle: statistics.averageScore > 0 ? `Avg: ${statistics.averageScore}%` : '',
                      icon: <BarChartIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(241, 196, 15, 0.15) 0%, rgba(253, 203, 110, 0.15) 100%)',
                      iconColor: '#f1c40f',
                      textColor: '#f39c12',
                      delay: 800
                    }
                  ].map((stat, index) => (
                    <Grid item xs={12} sm={6} md={3} key={index}>
                      <Zoom in={cardsLoaded} timeout={500} style={{ transitionDelay: `${stat.delay}ms` }}>
                        <Card sx={{ 
                          height: '100%', 
                          background: 'rgba(255, 255, 255, 0.7)',
                          backdropFilter: 'blur(20px)',
                          border: '1px solid rgba(255, 255, 255, 0.3)',
                          borderRadius: 4,
                          overflow: 'hidden',
                          position: 'relative',
                          cursor: 'pointer',
                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                          '&:hover': { 
                            transform: 'translateY(-10px) scale(1.03)',
                            boxShadow: '0 25px 50px rgba(0,0,0,0.15)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            '& .stat-icon': {
                              transform: 'scale(1.1) rotate(5deg)',
                            }
                          },
                          '&::before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            right: 0,
                            height: '4px',
                            background: stat.gradient.replace('0.15', '1'),
                          }
                        }}>
                          <CardContent sx={{ textAlign: 'center', py: 4, position: 'relative', zIndex: 1 }}>
                            <Box 
                              className="stat-icon"
                              sx={{ 
                                mb: 2, 
                                color: stat.iconColor,
                                transition: 'all 0.3s ease',
                                display: 'inline-block',
                              }}
                            >
                              {stat.icon}
                            </Box>
                            <Typography variant="h3" fontWeight="bold" sx={{ color: stat.textColor, mb: 1 }}>
                              {stat.value}
                            </Typography>
                            <Typography variant="h6" sx={{ color: stat.textColor, fontWeight: 500, opacity: 0.8 }}>
                              {stat.title}
                            </Typography>
                            {stat.subtitle && (
                              <Typography variant="body2" sx={{ color: stat.textColor, opacity: 0.6, mt: 1 }}>
                                {stat.subtitle}
                              </Typography>
                            )}
                          </CardContent>
                        </Card>
                      </Zoom>
                    </Grid>
                  ))}
                </Grid>

                {/* Main Content Row */}
                <Grid container spacing={4}>
                  {/* Progress Overview */}
                  <Grid item xs={12} lg={8}>
                    <Slide direction="up" in={cardsLoaded} timeout={800}>
                      <Card sx={{ 
                        height: 450, 
                        background: 'linear-gradient(145deg, #ffffff 0%, #f8f9ff 100%)',
                        borderRadius: 4,
                        boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                        border: '1px solid rgba(21, 101, 192, 0.1)',
                        position: 'relative',
                        overflow: 'hidden',
                        '&::before': {
                          content: '""',
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          right: 0,
                          height: '6px',
                          background: 'linear-gradient(90deg, #1565C0, #FFD700, #1565C0)',
                        }
                      }}>
                        <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column', p: 4 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>
                            <Box sx={{
                              p: 1.5,
                              borderRadius: 3,
                              background: 'linear-gradient(135deg, #1565C0, #0D47A1)',
                              mr: 2,
                              boxShadow: '0 4px 15px rgba(21, 101, 192, 0.3)',
                            }}>
                              <TrendingUpIcon sx={{ color: 'white', fontSize: 32 }} />
                            </Box>
                            <Typography variant="h4" fontWeight="bold" sx={{
                              background: 'linear-gradient(45deg, #1565C0, #0D47A1)',
                              backgroundClip: 'text',
                              WebkitBackgroundClip: 'text',
                              color: 'transparent',
                            }}>
                              Your Academic Progress
                            </Typography>
                          </Box>
                          
                          <Box sx={{ mb: 4 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                              <Typography variant="h5" fontWeight="bold" color="primary">
                                Overall Progress
                              </Typography>
                              <Typography variant="h4" fontWeight="bold" color="primary">
                                {calculateOverallProgress()}%
                              </Typography>
                            </Box>
                            <LinearProgress 
                              variant="determinate" 
                              value={calculateOverallProgress()} 
                              sx={{ 
                                height: 16, 
                                borderRadius: 8,
                                backgroundColor: '#e3f2fd',
                                '& .MuiLinearProgress-bar': {
                                  background: 'linear-gradient(45deg, #1565C0, #FFD700)',
                                  borderRadius: 8,
                                  boxShadow: '0 2px 8px rgba(21, 101, 192, 0.3)',
                                }
                              }}
                            />
                          </Box>
                          
                          <Divider sx={{ my: 2, opacity: 0.3 }} />
                          
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                            <Typography variant="h5" fontWeight="bold" color="text.primary">
                              Course Progress
                            </Typography>
                            <Chip
                              icon={<SchoolIcon />}
                              label={`${courses.length} Courses`}
                              sx={{
                                background: 'linear-gradient(45deg, #1565C0, #0D47A1)',
                                color: 'white',
                                fontWeight: 'bold',
                              }}
                            />
                          </Box>
                          
                          <List sx={{ overflow: 'auto', flexGrow: 1, pr: 1 }}>
                            {courses.map((course, index) => (
                              <Zoom in={cardsLoaded} timeout={600} style={{ transitionDelay: `${1000 + index * 200}ms` }} key={course._id}>
                                <ListItem sx={{ 
                                  py: 2, 
                                  px: 3, 
                                  mb: 2, 
                                  borderRadius: 3,
                                  background: 'linear-gradient(145deg, #f8f9fa 0%, #ffffff 100%)',
                                  border: '1px solid rgba(21, 101, 192, 0.1)',
                                  cursor: 'pointer',
                                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                                  '&:hover': { 
                                    transform: 'translateX(8px)',
                                    boxShadow: '0 8px 25px rgba(21, 101, 192, 0.15)',
                                    background: 'linear-gradient(145deg, #e3f2fd 0%, #f8f9ff 100%)',
                                  }
                                }}>
                                  <ListItemAvatar>
                                    <Avatar sx={{ 
                                      bgcolor: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                        ? 'linear-gradient(135deg, #4CAF50, #45a049)' 
                                        : 'linear-gradient(135deg, #FF9800, #f57c00)',
                                      width: 56,
                                      height: 56,
                                      border: '3px solid white',
                                      boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
                                    }}>
                                      <PlayCircleOutlineIcon sx={{ fontSize: 28 }} />
                                    </Avatar>
                                  </ListItemAvatar>
                                  <ListItemText 
                                    primary={
                                      <Typography variant="h6" fontWeight="bold" color="primary" gutterBottom>
                                        {course.title}
                                      </Typography>
                                    }
                                    secondary={
                                      <Box sx={{ mt: 1 }}>
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                          <Typography variant="body2" color="text.secondary">
                                            Progress: {course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)}% • 
                                            Videos: {course.actualVideosWatched !== undefined ? course.actualVideosWatched : (course.videosCompleted || 0)}/{course.totalVideos || 0}
                                            {course.actualWatchTime > 0 && (
                                              <> • Watch Time: {formatDuration(course.actualWatchTime)}</>
                                            )}
                                          </Typography>
                                          <Chip
                                            size="small"
                                            label={`${course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)}%`}
                                            sx={{
                                              background: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                                ? 'linear-gradient(45deg, #4CAF50, #45a049)' 
                                                : 'linear-gradient(45deg, #FF9800, #f57c00)',
                                              color: 'white',
                                              fontWeight: 'bold',
                                              minWidth: '60px',
                                            }}
                                          />
                                        </Box>
                                        <LinearProgress 
                                          variant="determinate" 
                                          value={course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)} 
                                          sx={{ 
                                            height: 8, 
                                            borderRadius: 4,
                                            backgroundColor: '#e0e0e0',
                                            '& .MuiLinearProgress-bar': {
                                              background: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                                ? 'linear-gradient(45deg, #4CAF50, #45a049)' 
                                                : 'linear-gradient(45deg, #FF9800, #f57c00)',
                                              borderRadius: 4,
                                            }
                                          }}
                                        />
                                      </Box>
                                    }
                                  />
                                </ListItem>
                              </Zoom>
                            ))}
                          </List>
                          
                          {courses.length === 0 && (
                            <Box sx={{ textAlign: 'center', py: 8 }}>
                              <SchoolIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
                              <Typography variant="h6" color="text.secondary">
                                No courses enrolled yet
                              </Typography>
                              <Typography variant="body2" color="text.disabled">
                                Start your learning journey today!
                              </Typography>
                            </Box>
                          )}
                        </CardContent>
                      </Card>
                    </Slide>
                  </Grid>
                  
                  {/* Recent Activity Sidebar */}
                  <Grid item xs={12} lg={4}>
              {/* Recent Activity */}
              <Card sx={{ 
                height: 400, // Expanded height since we removed forums
                background: 'linear-gradient(145deg, #ffffff 0%, #fff3e0 100%)',
                border: '1px solid #ffe0b2'
              }}>
                <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <AccessTimeIcon color="warning" sx={{ mr: 2 }} />
                    <Typography variant="h6" fontWeight="bold" color="warning.main">
                      Recent Activity
                    </Typography>
                  </Box>
                  
                  <List dense sx={{ overflow: 'auto', flexGrow: 1 }}>
                    {recentActivity.length > 0 ? (() => {
                      // Flatten video watch history into a list of recent videos
                      const recentVideos = [];
                      recentActivity.forEach(courseHistory => {
                        if (courseHistory.videos && Array.isArray(courseHistory.videos)) {
                          courseHistory.videos.forEach(video => {
                            recentVideos.push({
                              videoTitle: video.videoTitle,
                              courseTitle: courseHistory.courseTitle,
                              timeSpent: video.timeSpent,
                              lastWatched: video.lastWatched
                            });
                          });
                        }
                      });
                      
                      // Sort by most recent and show all
                      recentVideos.sort((a, b) => new Date(b.lastWatched) - new Date(a.lastWatched));
                      
                      return recentVideos.map((video, index) => (
                        <ListItem key={index} sx={{ px: 0, py: 1.5 }}>
                          <ListItemText 
                            primary={
                              <Typography variant="body2" fontWeight="medium">
                                {video.videoTitle}
                              </Typography>
                            }
                            secondary={
                              <Typography variant="caption" color="text.secondary">
                                {video.courseTitle} • {formatDuration(video.timeSpent)} • {formatDate(video.lastWatched)}
                              </Typography>
                            }
                          />
                        </ListItem>
                      ));
                    })() : (
                      <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                        No recent activity
                      </Typography>
                    )}
                  </List>
                </CardContent>
              </Card>
            </Grid>
          </Grid>

          {/* Quick Actions */}
          <Grid container spacing={2} sx={{ mt: 4 }}>
            <Grid item xs={12} sm={6} md={4}>
              <Button
                variant="contained"
                size="large"
                fullWidth
                startIcon={<VideoLibraryIcon />}
                onClick={() => navigate('/student/courses')}
                sx={{ 
                  py: 2,
                  background: 'linear-gradient(45deg, #2196F3, #21CBF3)',
                  '&:hover': { 
                    background: 'linear-gradient(45deg, #1976D2, #0288D1)',
                    transform: 'translateY(-2px)'
                  }
                }}
              >
                View All Courses
              </Button>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Button
                variant="contained"
                size="large"
                fullWidth
                startIcon={<BarChartIcon />}
                onClick={() => navigate('/student/quiz-results')}
                sx={{ 
                  py: 2,
                  background: 'linear-gradient(45deg, #4CAF50, #8BC34A)',
                  '&:hover': { 
                    background: 'linear-gradient(45deg, #388E3C, #689F38)',
                    transform: 'translateY(-2px)'
                  }
                }}
              >
                Quiz Results
              </Button>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Button
                variant="contained"
                size="large"
                fullWidth
                startIcon={<AccessTimeIcon />}
                onClick={() => navigate('/student/section')}
                sx={{ 
                  py: 2,
                  background: 'linear-gradient(45deg, #9C27B0, #E91E63)',
                  '&:hover': { 
                    background: 'linear-gradient(45deg, #7B1FA2, #C2185B)',
                    transform: 'translateY(-2px)'
                  }
                }}
              >
                My Section
              </Button>
            </Grid>
          </Grid>
        </>
      )}
    </Container>
        </Box>
      )}
    </>
  );
};

export default StudentHomeDashboard;
              <Fade in={cardsLoaded} timeout={800}>
                <Alert severity="error" sx={{ 
                  textAlign: 'center', 
                  mt: 4, 
                  borderRadius: 3,
                  boxShadow: 3 
                }}>
                  {error}
                </Alert>
              </Fade>
            ) : (
              <>
                {/* Statistics Cards Row */}
                <Grid container spacing={3} sx={{ mb: 6 }}>
                  {[
                    {
                      title: 'Total Courses',
                      value: statistics.totalCourses,
                      icon: <VideoLibraryIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(52, 152, 219, 0.15) 0%, rgba(116, 185, 255, 0.15) 100%)',
                      iconColor: '#3498db',
                      textColor: '#2980b9',
                      delay: 200
                    },
                    {
                      title: 'Videos Watched',
                      value: statistics.videosWatched,
                      subtitle: `out of ${statistics.totalVideos}`,
                      icon: <OndemandVideoIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(231, 76, 60, 0.15) 0%, rgba(255, 118, 117, 0.15) 100%)',
                      iconColor: '#e74c3c',
                      textColor: '#c0392b',
                      delay: 400
                    },
                    {
                      title: 'Watch Time',
                      value: formatDuration(statistics.totalWatchTime),
                      icon: <AccessTimeIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(46, 204, 113, 0.15) 0%, rgba(125, 206, 160, 0.15) 100%)',
                      iconColor: '#2ecc71',
                      textColor: '#27ae60',
                      delay: 600
                    },
                    {
                      title: 'Quizzes Completed',
                      value: statistics.completedQuizzes,
                      subtitle: statistics.averageScore > 0 ? `Avg: ${statistics.averageScore}%` : '',
                      icon: <BarChartIcon sx={{ fontSize: 48 }} />,
                      gradient: 'linear-gradient(135deg, rgba(241, 196, 15, 0.15) 0%, rgba(253, 203, 110, 0.15) 100%)',
                      iconColor: '#f1c40f',
                      textColor: '#f39c12',
                      delay: 800
                    }
                  ].map((stat, index) => (
                    <Grid item xs={12} sm={6} md={3} key={index}>
                      <Zoom in={cardsLoaded} timeout={500} style={{ transitionDelay: `${stat.delay}ms` }}>
                        <Card sx={{ 
                          height: '100%', 
                          background: 'rgba(255, 255, 255, 0.7)',
                          backdropFilter: 'blur(20px)',
                          border: '1px solid rgba(255, 255, 255, 0.3)',
                          borderRadius: 4,
                          overflow: 'hidden',
                          position: 'relative',
                          cursor: 'pointer',
                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                          '&:hover': { 
                            transform: 'translateY(-10px) scale(1.03)',
                            boxShadow: '0 25px 50px rgba(0,0,0,0.15)',
                            background: 'rgba(255, 255, 255, 0.9)',
                            '& .stat-icon': {
                              transform: 'scale(1.1) rotate(5deg)',
                            }
                          },
                          '&::before': {
                            content: '""',
                            position: 'absolute',
                            top: 0,
                            left: 0,
                            right: 0,
                            height: '4px',
                            background: stat.gradient.replace('0.15', '1'),
                          }
                        }}>
                          <CardContent sx={{ textAlign: 'center', py: 4, position: 'relative', zIndex: 1 }}>
                            <Box 
                              className="stat-icon"
                              sx={{ 
                                mb: 2, 
                                color: stat.iconColor,
                                transition: 'all 0.3s ease',
                                display: 'inline-block',
                              }}
                            >
                              {stat.icon}
                            </Box>
                            <Typography variant="h3" fontWeight="bold" sx={{ color: stat.textColor, mb: 1 }}>
                              {stat.value}
                            </Typography>
                            <Typography variant="h6" sx={{ color: stat.textColor, fontWeight: 500, opacity: 0.8 }}>
                              {stat.title}
                            </Typography>
                            {stat.subtitle && (
                              <Typography variant="body2" sx={{ color: stat.textColor, opacity: 0.6, mt: 1 }}>
                                {stat.subtitle}
                              </Typography>
                            )}
                          </CardContent>
                        </Card>
                      </Zoom>
                    </Grid>
                  ))}
                </Grid>

                {/* Main Content Row */}
                <Grid container spacing={4}>
                  {/* Progress Overview */}
                  <Grid item xs={12} lg={8}>
                    <Slide direction="up" in={cardsLoaded} timeout={800}>
                      <Card sx={{ 
                        height: 450, 
                        background: 'linear-gradient(145deg, #ffffff 0%, #f8f9ff 100%)',
                        borderRadius: 4,
                        boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                        border: '1px solid rgba(21, 101, 192, 0.1)',
                        position: 'relative',
                        overflow: 'hidden',
                        '&::before': {
                          content: '""',
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          right: 0,
                          height: '6px',
                          background: 'linear-gradient(90deg, #1565C0, #FFD700, #1565C0)',
                        }
                      }}>
                        <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column', p: 4 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>
                            <Box sx={{
                              p: 1.5,
                              borderRadius: 3,
                              background: 'linear-gradient(135deg, #1565C0, #0D47A1)',
                              mr: 2,
                              boxShadow: '0 4px 15px rgba(21, 101, 192, 0.3)',
                            }}>
                              <TrendingUpIcon sx={{ color: 'white', fontSize: 32 }} />
                            </Box>
                            <Typography variant="h4" fontWeight="bold" sx={{
                              background: 'linear-gradient(45deg, #1565C0, #0D47A1)',
                              backgroundClip: 'text',
                              WebkitBackgroundClip: 'text',
                              color: 'transparent',
                            }}>
                              Your Academic Progress
                            </Typography>
                          </Box>
                          
                          <Box sx={{ mb: 4 }}>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                              <Typography variant="h5" fontWeight="bold" color="primary">
                                Overall Progress
                              </Typography>
                              <Typography variant="h4" fontWeight="bold" color="primary">
                                {calculateOverallProgress()}%
                              </Typography>
                            </Box>
                            <LinearProgress 
                              variant="determinate" 
                              value={calculateOverallProgress()} 
                              sx={{ 
                                height: 16, 
                                borderRadius: 8,
                                backgroundColor: '#e3f2fd',
                                '& .MuiLinearProgress-bar': {
                                  background: 'linear-gradient(45deg, #1565C0, #FFD700)',
                                  borderRadius: 8,
                                  boxShadow: '0 2px 8px rgba(21, 101, 192, 0.3)',
                                }
                              }}
                            />
                          </Box>
                          
                          <Divider sx={{ my: 2, opacity: 0.3 }} />
                          
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                            <Typography variant="h5" fontWeight="bold" color="text.primary">
                              Course Progress
                            </Typography>
                            <Chip
                              icon={<SchoolIcon />}
                              label={`${courses.length} Courses`}
                              sx={{
                                background: 'linear-gradient(45deg, #1565C0, #0D47A1)',
                                color: 'white',
                                fontWeight: 'bold',
                              }}
                            />
                          </Box>
                          
                          <List sx={{ overflow: 'auto', flexGrow: 1, pr: 1 }}>
                            {courses.map((course, index) => (
                              <Zoom in={cardsLoaded} timeout={600} style={{ transitionDelay: `${1000 + index * 200}ms` }} key={course._id}>
                                <ListItem sx={{ 
                                  py: 2, 
                                  px: 3, 
                                  mb: 2, 
                                  borderRadius: 3,
                                  background: 'linear-gradient(145deg, #f8f9fa 0%, #ffffff 100%)',
                                  border: '1px solid rgba(21, 101, 192, 0.1)',
                                  cursor: 'pointer',
                                  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                                  '&:hover': { 
                                    transform: 'translateX(8px)',
                                    boxShadow: '0 8px 25px rgba(21, 101, 192, 0.15)',
                                    background: 'linear-gradient(145deg, #e3f2fd 0%, #f8f9ff 100%)',
                                  }
                                }}>
                                  <ListItemAvatar>
                                    <Avatar sx={{ 
                                      bgcolor: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                        ? 'linear-gradient(135deg, #4CAF50, #45a049)' 
                                        : 'linear-gradient(135deg, #FF9800, #f57c00)',
                                      width: 56,
                                      height: 56,
                                      border: '3px solid white',
                                      boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
                                    }}>
                                      <PlayCircleOutlineIcon sx={{ fontSize: 28 }} />
                                    </Avatar>
                                  </ListItemAvatar>
                                  <ListItemText 
                                    primary={
                                      <Typography variant="h6" fontWeight="bold" color="primary" gutterBottom>
                                        {course.title}
                                      </Typography>
                                    }
                                    secondary={
                                      <Box sx={{ mt: 1 }}>
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                          <Typography variant="body2" color="text.secondary">
                                            Progress: {course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)}% • 
                                            Videos: {course.actualVideosWatched !== undefined ? course.actualVideosWatched : (course.videosCompleted || 0)}/{course.totalVideos || 0}
                                            {course.actualWatchTime > 0 && (
                                              <> • Watch Time: {formatDuration(course.actualWatchTime)}</>
                                            )}
                                          </Typography>
                                          <Chip
                                            size="small"
                                            label={`${course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)}%`}
                                            sx={{
                                              background: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                                ? 'linear-gradient(45deg, #4CAF50, #45a049)' 
                                                : 'linear-gradient(45deg, #FF9800, #f57c00)',
                                              color: 'white',
                                              fontWeight: 'bold',
                                              minWidth: '60px',
                                            }}
                                          />
                                        </Box>
                                        <LinearProgress 
                                          variant="determinate" 
                                          value={course.enhancedProgress !== undefined ? course.enhancedProgress : (course.progress || 0)} 
                                          sx={{ 
                                            height: 8, 
                                            borderRadius: 4,
                                            backgroundColor: '#e0e0e0',
                                            '& .MuiLinearProgress-bar': {
                                              background: (course.enhancedProgress !== undefined ? course.enhancedProgress : course.progress) > 50 
                                                ? 'linear-gradient(45deg, #4CAF50, #45a049)' 
                                                : 'linear-gradient(45deg, #FF9800, #f57c00)',
                                              borderRadius: 4,
                                            }
                                          }}
                                        />
                                      </Box>
                                    }
                                  />
                                </ListItem>
                              </Zoom>
                            ))}
                          </List>
                          
                          {courses.length === 0 && (
                            <Box sx={{ textAlign: 'center', py: 8 }}>
                              <SchoolIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />
                              <Typography variant="h6" color="text.secondary">
                                No courses enrolled yet
                              </Typography>
                              <Typography variant="body2" color="text.disabled">
                                Start your learning journey today!
                              </Typography>
                            </Box>
                          )}
                        </CardContent>
                      </Card>
                    </Slide>
                  </Grid>
                  
                  {/* Activity Sidebar */}
                  <Grid item xs={12} lg={4}>
                    <Slide direction="left" in={cardsLoaded} timeout={1000}>
                      <Card sx={{ 
                        height: 450,
                        background: 'linear-gradient(145deg, #ffffff 0%, #fff8e1 100%)',
                        borderRadius: 4,
                        boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                        border: '1px solid rgba(255, 193, 7, 0.2)',
                        position: 'relative',
                        overflow: 'hidden',
                        '&::before': {
                          content: '""',
                          position: 'absolute',
                          top: 0,
                          left: 0,
                          right: 0,
                          height: '6px',
                          background: 'linear-gradient(90deg, #FFD700, #FFA000, #FFD700)',
                        }
                      }}>
                        <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column', p: 4 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                            <Box sx={{
                              p: 1.5,
                              borderRadius: 3,
                              background: 'linear-gradient(135deg, #FFD700, #FFA000)',
                              mr: 2,
                              boxShadow: '0 4px 15px rgba(255, 215, 0, 0.3)',
                            }}>
                              <AccessTimeIcon sx={{ color: 'white', fontSize: 24 }} />
                            </Box>
                            <Typography variant="h5" fontWeight="bold" sx={{
                              background: 'linear-gradient(45deg, #FFD700, #FFA000)',
                              backgroundClip: 'text',
                              WebkitBackgroundClip: 'text',
                              color: 'transparent',
                            }}>
                              Recent Activity
                            </Typography>
                          </Box>
                          
                          <List dense sx={{ overflow: 'auto', flexGrow: 1, pr: 1 }}>
                            {recentActivity.length > 0 ? (() => {
                              // Flatten video watch history into a list of recent videos
                              const recentVideos = [];
                              recentActivity.forEach(courseHistory => {
                                if (courseHistory.videos && Array.isArray(courseHistory.videos)) {
                                  courseHistory.videos.forEach(video => {
                                    recentVideos.push({
                                      videoTitle: video.videoTitle,
                                      courseTitle: courseHistory.courseTitle,
                                      timeSpent: video.timeSpent,
                                      lastWatched: video.lastWatched
                                    });
                                  });
                                }
                              });
                              
                              // Sort by most recent and show all
                              recentVideos.sort((a, b) => new Date(b.lastWatched) - new Date(a.lastWatched));
                              
                              return recentVideos.map((video, index) => (
                                <Fade in={cardsLoaded} timeout={800} style={{ transitionDelay: `${1200 + index * 100}ms` }} key={index}>
                                  <ListItem sx={{ 
                                    px: 0, 
                                    py: 2,
                                    borderRadius: 2,
                                    mb: 1,
                                    transition: 'all 0.2s ease',
                                    '&:hover': {
                                      background: 'rgba(255, 215, 0, 0.1)',
                                      transform: 'translateX(4px)',
                                    }
                                  }}>
                                    <ListItemAvatar>
                                      <Avatar sx={{ 
                                        bgcolor: 'linear-gradient(135deg, #FFD700, #FFA000)',
                                        width: 40,
                                        height: 40,
                                      }}>
                                        <PlayCircleOutlineIcon fontSize="small" />
                                      </Avatar>
                                    </ListItemAvatar>
                                    <ListItemText 
                                      primary={
                                        <Typography variant="body1" fontWeight="medium" color="text.primary">
                                          {video.videoTitle}
                                        </Typography>
                                      }
                                      secondary={
                                        <Box>
                                          <Typography variant="body2" color="text.secondary">
                                            {video.courseTitle}
                                          </Typography>
                                          <Typography variant="caption" color="text.disabled">
                                            {formatDuration(video.timeSpent)} • {formatDate(video.lastWatched)}
                                          </Typography>
                                        </Box>
                                      }
                                    />
                                  </ListItem>
                                </Fade>
                              ));
                            })() : (
                              <Box sx={{ textAlign: 'center', py: 8 }}>
                                <AccessTimeIcon sx={{ fontSize: 48, color: 'text.disabled', mb: 2 }} />
                                <Typography variant="h6" color="text.secondary">
                                  No recent activity
                                </Typography>
                                <Typography variant="body2" color="text.disabled">
                                  Start watching videos to see your activity here
                                </Typography>
                              </Box>
                            )}
                          </List>
                        </CardContent>
                      </Card>
                    </Slide>
                  </Grid>
                </Grid>

                {/* Quick Actions */}
                <Box sx={{ mt: 6 }}>
                  <Fade in={cardsLoaded} timeout={1000} style={{ transitionDelay: '1500ms' }}>
                    <Typography 
                      variant="h4" 
                      align="center" 
                      gutterBottom 
                      sx={{ 
                        mb: 4,
                        fontWeight: 'bold',
                        background: 'linear-gradient(45deg, #1565C0, #0D47A1)',
                        backgroundClip: 'text',
                        WebkitBackgroundClip: 'text',
                        color: 'transparent',
                      }}
                    >
                      Quick Actions
                    </Typography>
                  </Fade>
                  
                  <Grid container spacing={3}>
                    {[
                      {
                        title: 'View All Courses',
                        description: 'Explore your enrolled courses and continue learning',
                        icon: <VideoLibraryIcon sx={{ fontSize: 32 }} />,
                        gradient: 'linear-gradient(135deg, rgba(52, 152, 219, 0.9) 0%, rgba(41, 128, 185, 0.9) 100%)',
                        hoverGradient: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
                        onClick: () => navigate('/student/courses'),
                        delay: 1600
                      },
                      {
                        title: 'Quiz Results',
                        description: 'Check your quiz performance and scores',
                        icon: <BarChartIcon sx={{ fontSize: 32 }} />,
                        gradient: 'linear-gradient(135deg, rgba(46, 204, 113, 0.9) 0%, rgba(39, 174, 96, 0.9) 100%)',
                        hoverGradient: 'linear-gradient(135deg, #2ecc71 0%, #27ae60 100%)',
                        onClick: () => navigate('/student/quiz-results'),
                        delay: 1800
                      },
                      {
                        title: 'My Section',
                        description: 'View section details and announcements',
                        icon: <SchoolIcon sx={{ fontSize: 32 }} />,
                        gradient: 'linear-gradient(135deg, rgba(241, 196, 15, 0.9) 0%, rgba(243, 156, 18, 0.9) 100%)',
                        hoverGradient: 'linear-gradient(135deg, #f1c40f 0%, #f39c12 100%)',
                        onClick: () => navigate('/student/section'),
                        delay: 2000
                      }
                    ].map((action, index) => (
                      <Grid item xs={12} md={4} key={index}>
                        <Zoom in={cardsLoaded} timeout={600} style={{ transitionDelay: `${action.delay}ms` }}>
                          <Card
                            onClick={action.onClick}
                            sx={{
                              height: '200px',
                              background: 'rgba(255, 255, 255, 0.7)',
                              backdropFilter: 'blur(20px)',
                              border: '1px solid rgba(255, 255, 255, 0.3)',
                              borderRadius: 4,
                              cursor: 'pointer',
                              position: 'relative',
                              overflow: 'hidden',
                              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                              '&:hover': {
                                transform: 'translateY(-12px) scale(1.03)',
                                boxShadow: '0 25px 50px rgba(0,0,0,0.2)',
                                background: action.hoverGradient,
                                color: 'white',
                                '& .action-icon': {
                                  transform: 'scale(1.2) rotate(10deg)',
                                  background: 'rgba(255, 255, 255, 0.2)',
                                  color: 'white',
                                },
                                '& .action-text': {
                                  color: 'white',
                                }
                              },
                              '&::before': {
                                content: '""',
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                right: 0,
                                height: '4px',
                                background: action.gradient,
                              }
                            }}
                          >
                            <CardContent sx={{ 
                              height: '100%', 
                              display: 'flex', 
                              flexDirection: 'column', 
                              alignItems: 'center', 
                              justifyContent: 'center',
                              textAlign: 'center',
                              position: 'relative',
                              zIndex: 1,
                              p: 3
                            }}>
                              <Box 
                                className="action-icon"
                                sx={{ 
                                  mb: 2, 
                                  p: 2,
                                  borderRadius: '50%',
                                  background: action.gradient,
                                  color: 'white',
                                  transition: 'all 0.3s ease',
                                }}
                              >
                                {action.icon}
                              </Box>
                              <Typography 
                                variant="h5" 
                                fontWeight="bold" 
                                gutterBottom
                                className="action-text"
                                sx={{ 
                                  color: '#2c3e50',
                                  transition: 'color 0.3s ease'
                                }}
                              >
                                {action.title}
                              </Typography>
                              <Typography 
                                variant="body2" 
                                className="action-text"
                                sx={{ 
                                  color: '#7f8c8d',
                                  transition: 'color 0.3s ease'
                                }}
                              >
                                {action.description}
                              </Typography>
                            </CardContent>
                          </Card>
                        </Zoom>
                      </Grid>
                    ))}
                  </Grid>
                </Box>

                {/* Footer */}
                <Fade in={cardsLoaded} timeout={1000} style={{ transitionDelay: '2200ms' }}>
                  <Box sx={{ 
                    textAlign: 'center', 
                    mt: 8, 
                    py: 4,
                    borderTop: '1px solid rgba(21, 101, 192, 0.1)',
                  }}>
                    <SGTLogo size={60} animate={false} showText={false} />
                    <Typography variant="h6" sx={{ 
                      mt: 2,
                      color: '#1565C0',
                      fontWeight: 'bold',
                      letterSpacing: '1px'
                    }}>
                      SGT UNIVERSITY
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Excellence in Education • NAAC A+ Accredited
                    </Typography>
                    <Typography variant="caption" color="text.disabled" sx={{ mt: 2, display: 'block' }}>
                      "Education is the most powerful weapon which you can use to change the world"
                    </Typography>
                  </Box>
                </Fade>
              </>
            )}
          </Container>
        </Box>
      )}
    </>
>>>>>>> origin/vc-Integrated
  );
};

export default StudentHomeDashboard;
